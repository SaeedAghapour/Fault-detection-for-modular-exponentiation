`timescale 1ns / 1ps

module modular_pow_pipelined_tb;

    // Parameters
    parameter CLOCK_PERIOD = 2; // Clock period in ns
    
    // Inputs
    reg [31:0] base_tb;
    reg [31:0] exponent_tb;
    reg [31:0] phi_tb;
    reg [31:0] modulus_tb;
    reg clk_tb;
    reg rst_tb;

    // Outputs
    wire [31:0] result_tb;

    // Instantiate the module to be tested
    Unprotected_pipelined dut (
        .base(base_tb),
        .exponent(exponent_tb),
        .phi(phi_tb),
        .modulus(modulus_tb),
        .clk(clk_tb),
        .rst(rst_tb),
        .result(result_tb)
    );

    // Internal signals for debugging

    reg [31:0] clock_counter_dbg;

    // Clock generation
    always #((CLOCK_PERIOD)/2) clk_tb = ~clk_tb;

    // Reset generation
    initial begin
        rst_tb = 1;
        #100;
        rst_tb = 0;
    end

    // Test stimulus
    initial begin
        // Initialize inputs


        clk_tb = 0;

        // Apply inputs
        #10 base_tb = 1527;
        #10 exponent_tb = 7885;
        #10 phi_tb = 100000;
        #10 modulus_tb = 7436;


        #10;
        
        // Wait for some time
        #800;

        // End simulation
        $finish;
    end

    // Debugging statements
    always @(posedge clk_tb) begin
        $display("base_tb = %d, exponent_tb = %d, phi_tb = %d, modulus_tb = %d, result_tb = %d", 
            base_tb, exponent_tb, phi_tb, modulus_tb, clock_counter_dbg, result_tb);
    end

    // Assign internal signals for debugging
    always @* begin
        clock_counter_dbg = dut.clock_counter;
    end

endmodule
